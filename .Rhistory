input$getInverse
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
get <- function() i
set <- function(inv) { i <<- inv }
list(original = x, getInverse = get, setInverse = set)
}
cacheSolve <- function(x, ...) {
if(!identical(x$get(), x$original())) {
print("Evaluating!")
x$setInverse(solve(x$original))
}
x$get()
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cacheSolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
getInv <- function() i
set <- function(inv) { i <<- inv }
get <- function() x
list(original = get, getInverse = getInv, setInverse = set)
}
cachesolve <- function(input, ...){
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(!identical(mtrx, input$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- input$original()
inverted_mtrx <- input$setInverse(solve(mtrx))
input$getInverse()
} else if(identical(mtrx, input$original())){
message("Matrix and cache identical. Using inverted matrix.")
input$getInverse
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
getInv <- function() i
set <- function(inv) { i <<- inv }
get <- function() x
list(original = get, getInverse = getInv, setInverse = set)
}
cachesolve <- function(input, ...){
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, input$original())){
message("Matrix and cache identical. Using inverted matrix.")
input$getInverse
} else if(!identical(mtrx, input$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- input$original()
inverted_mtrx <- input$setInverse(solve(mtrx))
input$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, input$original())){
message("Matrix and cache identical. Using inverted matrix.")
input$getInverse
} else if(!identical(mtrx, input$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- input$original()
inverted_mtrx <- input$setInverse(solve(mtrx))
input$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
test$getInverse()
test$getInverse
test$getInverse()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
getInv <- function() i
set <- function(inv) { i <<- inv }
get <- function() x
list(original = get, getInverse = getInv, setInverse = set)
}
cachesolve <- function(input, ...){
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, input$original())){
message("Matrix and cache identical. Using inverted matrix.")
input$getInverse()
} else if(!identical(mtrx, input$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- input$original()
inverted_mtrx <- input$setInverse(solve(mtrx))
input$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
rm(mtrx)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
getInv <- function() i
set <- function(inv) { i <<- inv }
get <- function() x
list(original = get, getInverse = getInv, setInverse = set)
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse()
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse()
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
cachesolve <- function(input, ...){
if(!exists(x = "mtrx")){
mtrx <- NULL}
if(identical(mtrx, test$original())){
message("Matrix and cache identical. Using inverted matrix.")
test$getInverse()
} else if(!identical(mtrx, test$original())){
message("Matrix and cache not identical. Inverting matrix.")
mtrx <- test$original()
inverted_mtrx <- test$setInverse(solve(mtrx))
test$getInverse()
} else if (is.null(mtrx)) {
message("Matrix empty.")
} else {message("Critcal Error. Is the matrix defined?")}
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
testsolve <- cachesolve(test)
testsolve
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
getInv <- function() i
set <- function(inv) { i <<- inv }
get <- function() x
list(original = get, getInverse = getInv, setInverse = set)
}
clear
#Function 1: makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# Create empty 'inv' object to later assign value from a different environment through use of '<<-'
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
# List containing above functions to set and get a matrix and its inverse, respectively
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
#Function 2: cacheSolve
cachesolve <- function(x) {
# Returns calculation of inverse of makeCacheMatrix matrix
inv = x$getinv()
# If prev calc is available - i.e. an inverse of matrix with these values has been cached previously, meaning 'inv' is not empty this inverse is retrieved and returned without unneccessary computations to re-calculate.
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
# If a previous calculation is not available, cacheSolve calculates inverse of matrix...
mat.data = x$get()
inv = solve(mat.data, ...)
#...and sets in cache.
x$setinv(inv)
return(inv)
}
#Function 1: makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# Create empty 'inv' object to later assign value from a different environment through use of '<<-'
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
# List containing above functions to set and get a matrix and its inverse, respectively
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
#Function 2: cacheSolve
cachesolve <- function(x) {
# Returns calculation of inverse of makeCacheMatrix matrix
inv = x$getinv()
# If prev calc is available - i.e. an inverse of matrix with these values has been cached previously, meaning 'inv' is not empty this inverse is retrieved and returned without unneccessary computations to re-calculate.
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
# If a previous calculation is not available, cacheSolve calculates inverse of matrix...
mat.data = x$get()
inv = solve(mat.data, ...)
#...and sets in cache.
x$setinv(inv)
return(inv)
}
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
n <- matrix(sample(1:10, 25, replace=TRUE), nrow=5, ncol=5, byrow=FALSE)
test <- makeCacheMatrix(n)
testsolve <- cachesolve(test)
testsolve
identical(4c147dba7e2001234a26d9d0155987bce1ab1b07, 4c147dba7e2001234a26d9d0155987bce1ab1b07)
identical( "4c147dba7e2001234a26d9d0155987bce1ab1b07", "4c147dba7e2001234a26d9d0155987bce1ab1b07")
library(datasets)
data(iris)
head(iris)
sepalLength <- iris[, Sepal.Length]
sepalLength <- iris[, 1]
mean(sepalLength)
round(mean(sepalLength))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 1, mean)
data(mtcars)
head(mtcars)
class(mtcars)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
abs(mean(mtcars$hp[, cyl =4]))
mtcars$hp[, cyl =4]
sepalLength <- subset(iris, subset = Species == virginica, select = Sepal.Length)
sepalLength <- subset(iris, subset = Species == "virginica", select = Sepal.Length)
round(mean(sepalLength))
round(mean(sepalLength$Sepal.Length))
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
identical("0deeec348a7e77a61fcb02383506616007c420b8", "0deeec348a7e77a61fcb02383506616007c420b8")
identical("c8153806896209069bed282ae015a0c2958ad3d5", "c8153806896209069bed282ae015a0c2958ad3d5")
identical("c6d82a4bc32216734f5ad54b7c948812937fab5a", "c6d82a4bc32216734f5ad54b7c948812937fab5a")
identical("609fd56b1fec7c06b73e17f2a2061cc747746f37", "609fd56b1fec7c06b73e17f2a2061cc747746f37")
?str
